{"version":3,"sources":["utilities/Constants.ts","redux/hooks/hooks.ts","redux/features/reducers/weatherSlice.ts","api/weatherApi.ts","utilities/helpers.ts","redux/features/actions/tempAction.ts","components/loading/Loading.tsx","components/bar-chart/BarChart.tsx","redux/features/reducers/unitSlice.ts","components/temp-scale/TemperatureScale.tsx","redux/features/actions/unitAction.ts","redux/features/reducers/activeCardSlice.ts","redux/features/actions/activeCardAction.ts","components/pagination/Next.tsx","components/pagination/Previous.tsx","components/weather-card/WeatherCard.tsx","components/weather-card-list/WeatherCardList.tsx","components/weather-app/WeatherApp.tsx","components/error/Error.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["TemperatureUnit","useAppDispatch","useDispatch","useAppSelector","useSelector","weatherSlice","createSlice","name","initialState","isLoading","error","status","data","reducers","tempPending","state","tempSuccess","payload","tempFailure","reducer","actions","weatherTemp","process","tempUnitConverter","kelvin","unit","CELSIUS","Math","floor","timeFromTimestamp","timestamp","date","Date","moment","format","monthName","item","dateFromTimestamp","dt","fetchTemperatureData","dispatch","a","axios","get","headers","response","result","groupBy","list","sum","time","hourtemp","i","length","main","temp","timearr","push","obj","id","day","Avg_temp","description","weather","icon","hourlytemp","hours","Loading","className","BarChart","activeCard","useState","window","innerWidth","isMobile","setIsMobile","SetDevice","useEffect","addEventListener","removeEventListener","Xaxis","Yaxis","map","bardata","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","options","scales","yAxes","ticks","beginAtZero","unitSlice","setUnit","TemperatureScale","unitType","setUnitType","handleChange","e","valueType","target","value","type","checked","onChange","htmlFor","FAHRENHEIT","onClick","ActiveCardSlice","setActiveCard","setData","Next","props","style","Previous","display","WeatherCard","src","alt","WeatherCardList","settings","dots","autoplay","speed","infinite","nextArrow","prevArrow","slidesToShow","slidesToScroll","idx","WeatherApp","ErrorOccured","App","Error","store","configureStore","weatherReducer","unitReducer","activeCardReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0d18f85.chunk.js","sourcesContent":["export const BASE_URL =\n  \"https://api.openweathermap.org/data/2.5/forecast?q=lagos&appid=\";\nexport const ICON_URL = \"https://openweathermap.org/img/wn/\";\n\nexport enum TemperatureUnit {\n  CELSIUS = \"celsius\",\n  FAHRENHEIT = \"fahrenheit\",\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isLoading: false,\n  error: false,\n  status: \"\",\n  data: [],\n};\n\nconst weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    tempPending: (state) => {\n      state.isLoading = true;\n      state.status = \"loading\";\n    },\n    tempSuccess: (state, { payload }) => {\n      state.isLoading = false;\n      state.status = \"success\";\n      state.data = payload;\n    },\n    tempFailure: (state, { payload }) => {\n      state.isLoading = false;\n      state.status = \"failed\";\n      state.data = payload;\n    },\n  },\n});\n\nconst { reducer, actions } = weatherSlice;\nexport const { tempPending, tempSuccess, tempFailure } = actions;\n\nexport default reducer;\n","import axios from \"axios\";\nimport { BASE_URL } from \"../utilities/Constants\";\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconst weatherTemp = `${BASE_URL}${apiKey}`;\nexport const weatherApi = () => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return axios.get(weatherTemp, config);\n};\n","import moment from \"moment\";\nimport { TemperatureUnit } from \"./Constants\";\n\nexport const tempUnitConverter = (kelvin: number, unit: string) => {\n  if (unit === TemperatureUnit.CELSIUS) {\n    return Math.floor(kelvin - 273);\n  }\n  return Math.floor(((kelvin - 273.15) * 9) / 5 + 32);\n};\n\n// Get date from Unix timestamp\nexport const dateFromTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp * 1000);\n  return moment(date).format(\"ddd, MMMM DD\");\n};\n// Get time from Unix timestamp\nexport const timeFromTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp * 1000);\n  return moment(date).format(\"HH:mm A\");\n};\n\nexport const monthName = (item: { dt: number }) => {\n  return dateFromTimestamp(item.dt);\n};\n","import {\n  tempFailure,\n  tempPending,\n  tempSuccess,\n} from \"../reducers/weatherSlice\";\n\nimport { weatherApi } from \"../../../api/weatherApi\";\nimport { AppDispatch } from \"../../store\";\nimport groupBy from \"lodash.groupby\";\n\nimport { monthName, timeFromTimestamp } from \"../../../utilities/helpers\";\nimport { AxiosResponse } from \"axios\";\n\nexport const fetchTemperatureData = () => async (dispatch: AppDispatch) => {\n  dispatch(tempPending());\n  try {\n    const response: AxiosResponse<any> = await weatherApi();\n    if (response) {\n      const result = groupBy(response.data.list, monthName);\n\n      const data: {}[] = [];\n      for (const date in result) {\n        let sum = 0;\n        let time = [];\n        let hourtemp = [];\n\n        for (let i = 0; i < result[date].length; i++) {\n          sum += result[date][i].main.temp;\n          let timearr = result[date][i].dt;\n          time.push(timeFromTimestamp(timearr));\n          hourtemp.push(result[date][i].main.temp);\n        }\n        const obj = {\n          id: result[date][0].dt,\n          day: date,\n          Avg_temp: Math.floor(sum / result[date].length),\n          description: result[date][0].weather[0].description,\n          icon: result[date][0].weather[0].icon,\n          hourlytemp: hourtemp,\n          hours: time,\n        };\n\n        data.push(obj);\n      }\n\n      dispatch(tempSuccess(data));\n    }\n  } catch (error) {\n    dispatch(tempFailure(\"Oops, something went Wrong...\"));\n  }\n};\n","import { BiLoaderCircle } from \"react-icons/bi\";\n\nconst Loading = () => {\n  return (\n    <div className=\" animate-spin  flex flex-col items-center justify-center text-5xl text-yellow-600 \">\n      <BiLoaderCircle />\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useAppSelector } from \"../../redux/hooks/hooks\";\nimport { tempUnitConverter } from \"../../utilities/helpers\";\n\nconst BarChart = () => {\n  const { activeCard } = useAppSelector((state) => state.activeCard);\n  const { unit } = useAppSelector((state) => state.unit);\n\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 600);\n\n  const SetDevice = () => {\n    setIsMobile(window.innerWidth <= 600);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", SetDevice);\n    return () => window.removeEventListener(\"resize\", SetDevice);\n  }, []);\n\n  const Xaxis = activeCard.hours;\n  const Yaxis = activeCard.hourlytemp.map((item: number) =>\n    tempUnitConverter(item, unit)\n  );\n\n  const bardata = {\n    labels: Xaxis,\n    datasets: [\n      {\n        label: `${activeCard.day}`,\n        data: Yaxis,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 159, 64, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options: any = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  };\n  return (\n    <div className=\" md:w-2/3   text-yellow-800 font-myFontBold relative h-full \">\n      <h1 className=\"title\">Temperature Statistics</h1>\n\n      <Bar data={bardata} height={isMobile ? 250 : 150} options={options} />\n    </div>\n  );\n};\n\nexport default BarChart;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst unitSlice = createSlice({\n  name: \"unit\",\n  initialState: { unit: \"celsius\" },\n  reducers: {\n    setUnit: (state, { payload }) => {\n      state.unit = payload;\n    },\n  },\n});\n\nconst { reducer, actions } = unitSlice;\nexport const { setUnit } = actions;\n\nexport default reducer;\n","import { useState } from \"react\";\nimport { fetchTemperatureData } from \"../../redux/features/actions/tempAction\";\nimport { setTemperatureUnit } from \"../../redux/features/actions/unitAction\";\nimport { useAppDispatch } from \"../../redux/hooks/hooks\";\nimport { TemperatureUnit } from \"../../utilities/Constants\";\n\nexport default function TemperatureScale() {\n  const dispatch = useAppDispatch();\n  const [unitType, setUnitType] = useState<string>(TemperatureUnit.CELSIUS);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const valueType = e.target.value;\n    setUnitType(valueType);\n    dispatch(setTemperatureUnit(valueType));\n  };\n\n  return (\n    <div className=\" w-full flex   items-center justify-between text-yellow-800 font-myFontBold font-extra-black  \">\n      <form className=\"flex items-center\">\n        <input\n          type=\"radio\"\n          name=\"temp\"\n          value={TemperatureUnit.CELSIUS}\n          checked={unitType === TemperatureUnit.CELSIUS}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"celsius\" className=\"flex mr-4 ml-1\">\n          <span className=\" hidden md:flex \">Celsius </span>(°C)\n        </label>\n        <input\n          type=\"radio\"\n          name=\"temp\"\n          value={TemperatureUnit.FAHRENHEIT}\n          className=\" \"\n          onChange={handleChange}\n        />\n        <label htmlFor=\"farenheit\" className=\"flex ml-1\">\n          <span className=\" hidden md:flex\">Farenheit</span> (°F)\n        </label>\n      </form>\n\n      <button\n        className=\"bg-gray-200 p-2  shadow-lg rounded-lg  md:transform hover:-translate-y-1 \n      hover:scale-105 transition duration-500 ease-in-out\"\n        onClick={() => dispatch(fetchTemperatureData())}\n      >\n        Refresh\n      </button>\n    </div>\n  );\n}\n","import { AppDispatch } from \"../../store\";\nimport { setUnit } from \"../reducers/unitSlice\";\n\nexport const setTemperatureUnit = (unit: string) => async (\n  dispatch: AppDispatch\n) => {\n  dispatch(setUnit(unit));\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  error: false,\n  status: \"\",\n  activeCard: {\n    id: 0,\n    day: \"\",\n    Avg_temp: 0,\n    description: \"\",\n    icon: \"\",\n    hourlytemp: [],\n    hours: [],\n  },\n};\nconst ActiveCardSlice = createSlice({\n  name: \"activeCard\",\n  initialState,\n  reducers: {\n    setActiveCard: (state, { payload }) => {\n      state.activeCard = payload;\n      state.status = \"success\";\n    },\n  },\n});\n\nconst { reducer, actions } = ActiveCardSlice;\nexport const { setActiveCard } = actions;\n\nexport default reducer;\n","import { AppDispatch } from \"../../store\";\nimport { setActiveCard } from \"../reducers/activeCardSlice\";\n\nexport const setData = (data: {}) => async (dispatch: AppDispatch) => {\n  dispatch(setActiveCard(data));\n};\n","import { FaArrowAltCircleRight } from \"react-icons/fa\";\n\nconst Next = (props: any) => {\n  const { style, onClick } = props;\n  return (\n    <button\n      className=\"absolute -top-3   right-6 text-red-900 text-2xl md:text-5xl z-10\"\n      style={{ ...style }}\n      onClick={onClick}\n    >\n      <FaArrowAltCircleRight />\n    </button>\n  );\n};\n\nexport default Next;\n","import { FaArrowAltCircleLeft } from \"react-icons/fa\";\n\nconst Previous = (props: any) => {\n  const { style, onClick } = props;\n  return (\n    <button\n      className=\"absolute text-red-900 top-20 left-0 text-2xl md:text-5xl z-10 align-middle\"\n      style={{ ...style, display: `${onClick == null ? \"none\" : \"block\"}` }}\n      onClick={onClick}\n    >\n      <FaArrowAltCircleLeft />\n    </button>\n  );\n};\n\nexport default Previous;\n","import { useAppSelector } from \"../../redux/hooks/hooks\";\n\nexport interface Prop {\n  day: string;\n  Avg_temp: number;\n  description: string;\n  icon: string;\n  onClick: () => void;\n}\nconst WeatherCard = ({ day, Avg_temp, description, icon, onClick }: Prop) => {\n  const { unit } = useAppSelector((state) => state.unit);\n  return (\n    <li\n      className=\" bg-gray-200 text-red-900   md:h-52  mx-2 pt-2 md:pt-0\n      md:w-64 my-4 md:my-3 md:mx-auto shadow-lg rounded-lg md:transform hover:-translate-y-1 \n      hover:scale-105 transition duration-500 ease-in-out list-none \"\n      onClick={onClick}\n    >\n      <span className=\"block flex justify-center font-myFont mb-4\">{day}</span>\n\n      <div className=\" w-full flex  items-center justify-center text-5xl text-yellow-800 font-extra-black font-myFontBold\">\n        <span className=\"  \">\n          {Avg_temp}\n          <span className=\" \">{unit === \"celsius\" ? \"°C\" : \"°F\"}</span>\n        </span>\n      </div>\n      <div className=\"flex w-full items-center  \">\n        <img src={icon} alt=\"day's weather\" className=\"\" />\n        <span className=\" block ml-2 capitalize\">{description}</span>\n      </div>\n    </li>\n  );\n};\n\nexport default WeatherCard;\n","import \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider from \"react-slick\";\nimport \"./style.css\";\nimport { useEffect, useState } from \"react\";\nimport { setData } from \"../../redux/features/actions/activeCardAction\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks/hooks\";\nimport { ICON_URL } from \"../../utilities/Constants\";\nimport { tempUnitConverter } from \"../../utilities/helpers\";\nimport Next from \"../pagination/Next\";\nimport Previous from \"../pagination/Previous\";\nimport WeatherCard from \"../weather-card/WeatherCard\";\n\ninterface itemProp {\n  day: string;\n  Avg_temp: number;\n  description: string;\n  icon: string;\n  hours: [];\n  hourlytemp: [];\n}\n\nconst WeatherCardList = () => {\n  const { data } = useAppSelector((state) => state.weather);\n  const { unit } = useAppSelector((state) => state.unit);\n  const dispatch = useAppDispatch();\n  dispatch(setData(data[0]));\n\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 600);\n\n  const SetDevice = () => {\n    setIsMobile(window.innerWidth <= 600);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", SetDevice);\n    return () => window.removeEventListener(\"resize\", SetDevice);\n  }, []);\n\n  var settings = {\n    dots: false,\n    autoplay: false,\n    speed: 400,\n    infinite: false,\n    nextArrow: (\n      <span className=\"bg-red-400\">\n        <Next />\n      </span>\n    ),\n    prevArrow: <Previous />,\n    slidesToShow: isMobile ? 1 : 3,\n    slidesToScroll: isMobile ? 1 : 3,\n  };\n\n  return (\n    <section className=\"\">\n      <Slider {...settings} className=\"relative px-8 \">\n        {data.map((temp: itemProp, idx: number) => {\n          const { day, description, Avg_temp, icon } = temp;\n          return (\n            <WeatherCard\n              key={idx}\n              day={day}\n              Avg_temp={tempUnitConverter(Avg_temp, unit)}\n              description={description}\n              icon={`${ICON_URL}${icon}@2x.png`}\n              onClick={() => dispatch(setData(temp))}\n            />\n          );\n        })}\n      </Slider>\n    </section>\n  );\n};\n\nexport default WeatherCardList;\n","import BarChart from \"../bar-chart/BarChart\";\nimport TemperatureScale from \"../temp-scale/TemperatureScale\";\nimport WeatherCardList from \"../weather-card-list/WeatherCardList\";\n\nconst WeatherApp = () => {\n  return (\n    <section className=\" md:w-4/5 md:px-0 md:px-2 px-4 w-full h-screen flex text-red-900 flex-col items-center \">\n      <h1 className=\" font-myfontBold text-3xl md:text-5xl mt-4 md:mt-4 flex items-center justify-center\">\n        Sky Up Weather\n      </h1>\n      <p className=\"md:my-2 my-4 text-center\">\n        (Showing Weather information for Lagos, Nigeria)\n      </p>\n      <div className=\"w-full  flex items-center\">\n        <TemperatureScale />\n      </div>\n\n      <div className=\" w-full  \">\n        <WeatherCardList />\n      </div>\n      <div className=\" md:w-full mt-6 md:mt-2 h-auto  flex items-center justify-center\">\n        <BarChart />\n      </div>\n    </section>\n  );\n};\n\nexport default WeatherApp;\n","import { GiTerror } from \"react-icons/gi\";\n\nconst ErrorOccured = () => {\n  return (\n    <div className=\"flex flex-col items-center justify-center text-3xl md:text-5xl text-yellow-600 \">\n      <GiTerror />\n      <p className=\"md:text-3xl text-xl\">Ooops, there was an error</p>\n    </div>\n  );\n};\n\nexport default ErrorOccured;\n","import \"./tailwind/output.css\";\nimport \"./App.css\";\n\nimport { useAppDispatch, useAppSelector } from \"./redux/hooks/hooks\";\nimport { useEffect } from \"react\";\nimport { fetchTemperatureData } from \"./redux/features/actions/tempAction\";\nimport Loading from \"./components/loading/Loading\";\nimport WeatherApp from \"./components/weather-app/WeatherApp\";\nimport ErrorOccured from \"./components/error/Error\";\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector((state) => state.weather);\n\n  useEffect(() => {\n    dispatch(fetchTemperatureData());\n  }, []);\n  const renderContent = (): JSX.Element => {\n    if (status === \"loading\") return <Loading />;\n    if (status === \"success\") return <WeatherApp />;\n    if (status === \"failed\") return <ErrorOccured />;\n\n    return <></>;\n  };\n  return (\n    <main\n      className={`h-screen w-screen flex flex-col items-center ${\n        status === \"loading\" || status === \"failed\" ? \"justify-center\" : \"\"\n      } `}\n    >\n      {renderContent()}\n    </main>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport weatherReducer from \"./features/reducers/weatherSlice\";\nimport unitReducer from \"./features/reducers/unitSlice\";\nimport activeCardReducer from \"./features/reducers/activeCardSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    weather: weatherReducer,\n    unit: unitReducer,\n    activeCard: activeCardReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}